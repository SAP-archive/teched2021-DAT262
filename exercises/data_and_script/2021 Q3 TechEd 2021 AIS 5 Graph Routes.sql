/***************************************/
-- # Exercise 5 - Vessel Routes
/***************************************/

/***************************************/
-- ## Generate a Network for Path Finding

-- Let's make a network/graph on which we can calculate routes.
-- We'll take hexagon clusters as vertices and then calculate edges between.
CREATE COLUMN TABLE "AIS_DEMO"."ROUTE_NETWORK_VERTICES" (
	"ID" BIGINT PRIMARY KEY, 
	"HEXAGON" ST_GEOMETRY(32616), 
	"CENTROID" ST_GEOMETRY(32616), 
	"C" BIGINT, 
	"SHIPS" INT, 
	"SOG" DOUBLE, 
	"CARGO_TRANSIT_COST_FACTOR" DOUBLE DEFAULT 1.0
);

INSERT INTO "AIS_DEMO"."ROUTE_NETWORK_VERTICES" ("ID", "HEXAGON", "CENTROID", "C", "SHIPS", "SOG")
	SELECT ST_CLUSTERID() AS "ID", ST_CLUSTERCELL() AS "HEXAGON", ST_CLUSTERCELL().ST_CENTROID() AS "CENTROID", 
			COUNT(*) AS C, COUNT(DISTINCT "MMSI") AS "SHIPS", AVG("SOG") AS "SOG" 
		FROM "AIS_DEMO"."AIS_2017"
		GROUP CLUSTER BY "SHAPE_32616" USING HEXAGON Y CELLS 400;

SELECT * FROM "AIS_DEMO"."ROUTE_NETWORK_VERTICES";

-- We want to find routes for cargo ships especially. So, if the cluster cell is on a frequent cargo route, we set a CARGO_TRANSIT_COST_FACTOR.
-- For this, we are re-using the results from the cargo ship clustering we ran in the previous exercise.
-- The higher the number of cargo ships observed in a cluster cell, the lower the cargo fact will be: 1/number of ships.
-- The "CARGO_TRANSIT_COST_FACTOR" will be used to calculate a least-cost path... i.e. a path that favours established cargo routes.
MERGE INTO "AIS_DEMO"."ROUTE_NETWORK_VERTICES" R
	USING (SELECT R."ID", 1/MAX(C."SHIPS") AS "CARGO_TRANSIT_COST_FACTOR"
		FROM "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS R	
		INNER JOIN "AIS_DEMO"."CLUSTER_CARGO" AS C 
		ON R."CENTROID".ST_INTERSECTS(C."SHAPE_32616") = 1
		GROUP BY R."ID") AS C
	ON R."ID" = C."ID"
	WHEN MATCHED THEN UPDATE SET R."CARGO_TRANSIT_COST_FACTOR" = C."CARGO_TRANSIT_COST_FACTOR";

SELECT MIN("CARGO_TRANSIT_COST_FACTOR"), MAX("CARGO_TRANSIT_COST_FACTOR") FROM "AIS_DEMO"."ROUTE_NETWORK_VERTICES";

-- We now generate the edges between the cluster cells. For this we are using the ST_WithinDistance() predicate.
-- We just need to find out the distance between the hexagon centroids.
SELECT ST_GEOMFROMWKT('POINT('||YMIN||' '||X||')', 32616).ST_DISTANCE(ST_GEOMFROMWKT('POINT('||YMAX||' '||X||')', 32616),'meter')/400 AS "CELL_DISTANCE"
		FROM (SELECT MIN("CENTROID".ST_Y()) AS YMIN, MIN("CENTROID".ST_X()) AS X, MAX("CENTROID".ST_Y()) AS YMAX FROM "AIS_DEMO"."ROUTE_NETWORK_VERTICES");
-- Result: 1321 m

-- Create the edges table
CREATE COLUMN TABLE "AIS_DEMO"."ROUTE_NETWORK_EDGES" (
	"ID" BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	"SOURCE" BIGINT NOT NULL,
	"TARGET" BIGINT NOT NULL,
	"LINE_32616" ST_GEOMETRY(32616),
	"LENGTH" DOUBLE,
	"AVG_C" DOUBLE,
	"AVG_SHIPS" DOUBLE,
	"AVG_SOG" DOUBLE,
	"AVG_CARGO_TRANSIT_COST_FACTOR" DOUBLE DEFAULT 1.0,
	"BLOCKED" BOOLEAN DEFAULT FALSE
);
-- and fill edges table
INSERT INTO "AIS_DEMO"."ROUTE_NETWORK_EDGES"("SOURCE", "TARGET", "LINE_32616", "LENGTH", "AVG_C", "AVG_SHIPS", "AVG_SOG", "AVG_CARGO_TRANSIT_COST_FACTOR")
	SELECT T1.ID AS "SOURCE", T2.ID AS "TARGET", ST_MAKELINE(T1."CENTROID", T2."CENTROID") AS "LINE_32616",
		CASE WHEN T1.ID != T2.ID THEN ST_MAKELINE(T1."CENTROID", T2."CENTROID").ST_LENGTH() ELSE 0 END AS "LENGTH", 
		(T1."C" + T2."C")/2 AS "AVG_C",
		(T1."SHIPS" + T2."SHIPS")/2 AS "AVG_SHIPS",
		(T1."SOG" + T2."SOG")/2 AS "AVG_SOG",
		(T1."CARGO_TRANSIT_COST_FACTOR" + T2."CARGO_TRANSIT_COST_FACTOR")/2 AS "AVG_CARGO_TRANSIT_COST_FACTOR"
		FROM "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS T1, "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS T2
		WHERE T1."CENTROID".ST_WITHINDISTANCE(T2."CENTROID", 1321*1.5, 'meter') = 1;
-- ... and remove self edges
DELETE FROM "AIS_DEMO"."ROUTE_NETWORK_EDGES" WHERE "SOURCE" = "TARGET";

SELECT MIN("AVG_CARGO_TRANSIT_COST_FACTOR"),MAX("AVG_CARGO_TRANSIT_COST_FACTOR") FROM "AIS_DEMO"."ROUTE_NETWORK_EDGES"; 

-- Create a graph workspace
CREATE GRAPH WORKSPACE "AIS_DEMO"."ROUTE_NETWORK_GRAPH"
    EDGE TABLE "AIS_DEMO"."ROUTE_NETWORK_EDGES" SOURCE COLUMN "SOURCE" TARGET COLUMN "TARGET" KEY COLUMN "ID"
    VERTEX TABLE "AIS_DEMO"."ROUTE_NETWORK_VERTICES" KEY COLUMN "ID";

-- Shortest Path function
CREATE OR REPLACE FUNCTION "AIS_DEMO"."F_SHORTEST_PATH"(
	IN i_startVertex BIGINT, 
	IN i_endVertex BIGINT, 
	IN i_cargoFactorWeight DOUBLE -- 0.0 calculates shortest path, 1.0 forces the path on cargo routes
	)
	RETURNS TABLE ("ID" BIGINT, "VERTEX_ORDER" BIGINT)
LANGUAGE GRAPH AS
BEGIN
	GRAPH g = Graph("AIS_DEMO", "ROUTE_NETWORK_GRAPH");
	VERTEX v_start = Vertex(:g, :i_startVertex);
	VERTEX v_end = Vertex(:g, :i_endVertex);
	WeightedPath<DOUBLE> p = Shortest_Path(:g, :v_start, :v_end, (Edge e) => DOUBLE{ 
		IF (:e."BLOCKED" == FALSE) {RETURN :e."LENGTH"*((1.0 - :i_cargoFactorWeight) + :i_cargoFactorWeight*:e."AVG_CARGO_TRANSIT_COST_FACTOR");} 
		ELSE {END TRAVERSE;} }, 'ANY');
	RETURN SELECT :v."ID", :VERTEX_ORDER FOREACH v IN Vertices(:p) WITH ORDINALITY AS VERTEX_ORDER;
END;

SELECT * FROM "AIS_DEMO"."F_SHORTEST_PATH"(i_startVertex => 29117, i_endVertex => 28448, i_cargoFactorWeight => 0.4) AS P 
	LEFT JOIN "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS V ON P.ID = V.ID;


-- Wrap the function call in a view, so we can display the data in QGIS
CREATE OR REPLACE VIEW "AIS_DEMO"."V_SHORTEST_PATH" AS (
	SELECT P."ID", P."VERTEX_ORDER", V."CENTROID"
	FROM "AIS_DEMO"."F_SHORTEST_PATH"(29117, 28448, 0.4) AS P -- chicago
	--FROM "AIS_DEMO"."F_SHORTEST_PATH"(29117, 20543, 0.2) AS P -- milwaukee 
	LEFT JOIN "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS V 
	ON P."ID" = V."ID"
);

-- simulate a blockage near Sturgeon Bay by setting "BLOCKED" = TRUE for all edges near this location
UPDATE "AIS_DEMO"."ROUTE_NETWORK_EDGES"
	SET "BLOCKED" = TRUE
	WHERE LINE_32616.ST_INTERSECTS(ST_GEOMFROMTEXT('POINT(-87.38079071044923 44.8311608680887)', 4326).ST_TRANSFORM(32616).ST_BUFFER(200)) = 1;




-- Optional: persist the route (without blockage)
UPDATE "AIS_DEMO"."ROUTE_NETWORK_EDGES"	SET "BLOCKED" = FALSE;
CREATE COLUMN TABLE "AIS_DEMO"."SHORTEST_PATH_1" ( "ID" BIGINT PRIMARY KEY, "VERTEX_ORDER" BIGINT, "CENTROID" ST_GEOMETRY(32616));
TRUNCATE TABLE "AIS_DEMO"."SHORTEST_PATH_1";
INSERT INTO "AIS_DEMO"."SHORTEST_PATH_1"
	SELECT P."ID", P."VERTEX_ORDER", V."CENTROID"
	FROM "AIS_DEMO"."F_SHORTEST_PATH"(29117, 28448, 0.4) AS P -- chicago
	--FROM "AIS_DEMO"."F_SHORTEST_PATH"(29117, 20543, 0.8) AS P -- milwaukee 
	LEFT JOIN "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS V 
	ON P."ID" = V."ID";
	
-- simulate a blockage near Sturgeon Bay by setting "BLOCKED" = TRUE for all edges near this location
UPDATE "AIS_DEMO"."ROUTE_NETWORK_EDGES"
	SET "BLOCKED" = TRUE
	WHERE LINE_32616.ST_INTERSECTS(ST_GEOMFROMTEXT('POINT(-87.38079071044923 44.8311608680887)', 4326).ST_TRANSFORM(32616).ST_BUFFER(200)) = 1;
	
-- Optional: persist the alternative route 
CREATE COLUMN TABLE "AIS_DEMO"."SHORTEST_PATH_2" ( "ID" BIGINT PRIMARY KEY, "VERTEX_ORDER" BIGINT, "CENTROID" ST_GEOMETRY(32616));
TRUNCATE TABLE "AIS_DEMO"."SHORTEST_PATH_2";
INSERT INTO "AIS_DEMO"."SHORTEST_PATH_2"
	SELECT P."ID", P."VERTEX_ORDER", V."CENTROID"
	FROM "AIS_DEMO"."F_SHORTEST_PATH"(29117, 28448, 0.4) AS P -- chicago
	--FROM "AIS_DEMO"."F_SHORTEST_PATH"(29117, 20543, 0.8) AS P -- 
	LEFT JOIN "AIS_DEMO"."ROUTE_NETWORK_VERTICES" AS V 
	ON P."ID" = V."ID";



